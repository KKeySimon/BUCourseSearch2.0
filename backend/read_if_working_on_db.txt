This is the logic that I've used to implement the database
(and I'm assuming I have the right assumptions for this with the few resources I found)

Implementation:
#1: ID's
    - Sections will be made up of identifiers that are made by encoding a string into a 32-bit integer
    - Purpose of these id's is so that when adding to DB, the same courses will return the same ID and will replace old database
    - ID's are required to be integers in SupaBase

#2: Column Names & Join
    - We can join two tables together, which means that the table will look for columns between 2 tables that are identical
    - If the two columns are identical and 2 value points within these columns are identical, we can use join on them
    - Read up on join in: https://www.w3schools.com/sql/sql_join.asp
    - This is why some column names might be odd. I want only course_id (i.e. "CAS CS 112") to be identical between the 2 tables
    - If everything works, our query should return with each row returning a section with the course attached
    - This will return in duplicate courses but unique sections, but I think we can deal with this.

ALSO: We may need to use javascript. I think since there isn't a async function, only one data manages to actually
get logged into the db. Try figuring out a fix for this